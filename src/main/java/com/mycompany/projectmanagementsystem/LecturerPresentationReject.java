/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.projectmanagementsystem;

import com.mycompany.projectmanagementsystem.GeneralFunction.SessionManager;
import com.mycompany.projectmanagementsystem.Notification.NotificationController;
import com.mycompany.projectmanagementsystem.User.User;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class LecturerPresentationReject extends javax.swing.JDialog {

    /**
     * Creates new form LecturerPresentationReject
     */    
    private final SessionManager sessionManager = SessionManager.getInstance();
    User user = sessionManager.getCurrentUser();
    private String userRole;
    private String stdID;
    private boolean notificationCreated = false;
    
    public LecturerPresentationReject(String role, String id){
        this.userRole = role;
        this.stdID = id;
        initComponents();
        setModal(true); // Make the dialog modal
    }
    
    public boolean isNotificationCreated() {
        return notificationCreated;
    }    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        availdate = new com.toedter.calendar.JDateChooser();
        availUntilTime = new javax.swing.JTextField();
        availFromTime = new javax.swing.JTextField();
        confirmSlotBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(500, 300));
        setMinimumSize(new java.awt.Dimension(500, 300));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel2.setText("Until");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 170, -1, -1));

        jLabel3.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        jLabel3.setText("Available Presentation Slot");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, -1, -1));

        jLabel4.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel4.setText("Date");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, -1, -1));

        jLabel5.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel5.setText("Time      From");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 120, -1));

        availdate.setMaximumSize(new java.awt.Dimension(150, 30));
        availdate.setMinSelectableDate(new java.util.Date(-62135794691000L));
        availdate.setMinimumSize(new java.awt.Dimension(150, 30));
        availdate.setPreferredSize(new java.awt.Dimension(150, 30));
        getContentPane().add(availdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 90, 160, 30));

        availUntilTime.setText("(eg. 17:00)");
        availUntilTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availUntilTimeActionPerformed(evt);
            }
        });
        getContentPane().add(availUntilTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 160, 100, 30));

        availFromTime.setText("(eg. 13:00)");
        availFromTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availFromTimeActionPerformed(evt);
            }
        });
        getContentPane().add(availFromTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 160, 100, 30));

        confirmSlotBtn.setBackground(new java.awt.Color(76, 127, 174));
        confirmSlotBtn.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        confirmSlotBtn.setForeground(new java.awt.Color(255, 255, 255));
        confirmSlotBtn.setText("Confirm");
        confirmSlotBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        confirmSlotBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmSlotBtnActionPerformed(evt);
            }
        });
        getContentPane().add(confirmSlotBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 240, 90, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_background.png"))); // NOI18N
        jLabel1.setMaximumSize(new java.awt.Dimension(500, 300));
        jLabel1.setMinimumSize(new java.awt.Dimension(500, 300));
        jLabel1.setPreferredSize(new java.awt.Dimension(500, 300));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
        jLabel1.getAccessibleContext().setAccessibleName("jLabel1");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void confirmSlotBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmSlotBtnActionPerformed
        String[] userInput = new String[3];
        Date chosenDate = availdate.getDate();
        if (chosenDate== null) {
            JOptionPane.showMessageDialog(null, "Please select your available date.");
            return;
        }
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String availDate = sdf.format(chosenDate);
        userInput[0] = availDate;

        // Validate availFromTime
        String fromTime = availFromTime.getText();
        if (!fromTime.matches("^([01]?[0-9]|2[0-3]):[0-5][0-9]$")) {
            JOptionPane.showMessageDialog(null, "Please enter a valid 24-hour format for 'From Time'.");
            return;
        }
        userInput[1] = fromTime;

        // Validate availUntilTime
        String untilTime = availUntilTime.getText();
        if (!untilTime.matches("^([01]?[0-9]|2[0-3]):[0-5][0-9]$")) {
            JOptionPane.showMessageDialog(null, "Please enter a valid 24-hour format for 'Until Time'.");
            return;
        }
        userInput[2] = untilTime;

        int confirm = JOptionPane.showConfirmDialog(null, "Are you confirmed the available slot as follows?\nDate: "
                + userInput[0] + "\nTime: " + userInput[1] + "-" + userInput[2], 
                    "Confirmation", JOptionPane.YES_NO_OPTION);
        notificationCreated = false;

        if(confirm == JOptionPane.YES_OPTION){
            switch(userRole){
                case "supervisor" -> {
                    NotificationController.create(stdID, "Your supervisor(" + user.getName() + ") has rejected your presentation request. "
                    + "Please refer to the available slot given:- Date: " + userInput[0] + " Time: " + userInput[1] + "-" + userInput[2]);
                    notificationCreated = true;
                    break;
                }
                case "second marker" -> {
                    NotificationController.create(stdID, "Your second marker(" + user.getName() + ") has rejected your presentation request. "
                    + "Please refer to the available slot given:- Date: " + userInput[0] + " Time: " + userInput[1] + "-" + userInput[2]);
                    notificationCreated = true;
                    break;
                }
            }   
            JOptionPane.showMessageDialog(null, "Available slot notification has been sent.\nPresentation request has been rejected.");
            this.setVisible(false);
        }
    }//GEN-LAST:event_confirmSlotBtnActionPerformed

    private void availUntilTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availUntilTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_availUntilTimeActionPerformed

    private void availFromTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availFromTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_availFromTimeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LecturerPresentationReject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LecturerPresentationReject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LecturerPresentationReject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LecturerPresentationReject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LecturerPresentationReject("role","stdID").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField availFromTime;
    private javax.swing.JTextField availUntilTime;
    private com.toedter.calendar.JDateChooser availdate;
    private javax.swing.JButton confirmSlotBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables
}
