/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.projectmanagementsystem;

import com.mycompany.projectmanagementsystem.Assessment.AssessmentController;
import com.mycompany.projectmanagementsystem.Assessment.LecMarkedReportTableActionEvent;
import com.mycompany.projectmanagementsystem.GeneralFunction.FileHandler;
import com.mycompany.projectmanagementsystem.GeneralFunction.SessionManager;
import com.mycompany.projectmanagementsystem.User.User;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class LecturerMarkedReport extends javax.swing.JFrame {

    /**
     * Creates new form LecturerMarkedReport
     */
    private final SessionManager sessionManager = SessionManager.getInstance();
    User user = sessionManager.getCurrentUser();
    private String AssmntID;
    private String intakeCode;
    private String AssmntType;
    private LecturerIntakePage intakePage;
    
    public LecturerMarkedReport(String id, String code, String type, LecturerIntakePage intakePage) {
        this.intakePage = intakePage;
        this.AssmntID = id;
        this.intakeCode = code;
        this.AssmntType = type;
        initComponents();
        intakeLabel.setText(code);
        showMarkedReport();
        
        lect_MarkedReportPanelAction rpanel = new lect_MarkedReportPanelAction();
        LecMarkedReportTableActionEvent rptevent = new LecMarkedReportTableActionEvent() {
            @Override
            public void viewMarkedReport(int row, Object value) {
                List<String> data = FileHandler.readFile("student_assessment.txt");

                DefaultTableModel model = (DefaultTableModel) MarkedReportTable.getModel();
                String stdID = (String) model.getValueAt(row, 0);
                String name = (String) model.getValueAt(row, 1);
                String subLink = null;
                boolean canViewReport = false;

                for (String line : data) {
                    String[] list = line.split(";");
                    if (list[1].equals(stdID)) {
                        if (!list[8].isEmpty()) { // Check if grade has been given or not
                            subLink = list[4];
                            canViewReport = true;
                        }
                        break;
                    }
                }

                if (canViewReport && subLink != null) {
                    LecturerReportGrading markReport = new LecturerReportGrading(intakePage, AssmntID, stdID, name, subLink, AssmntType, intakeCode);
                    markReport.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(null, "Cannot view marked report. Grade is not assigned for student ID: " + stdID);
                }
            }
   
        };
        if ("internship_report".equals(AssmntType) || "investigation".equals(AssmntType)) {
            MarkedReportTable.getColumnModel().getColumn(3).setCellRenderer(rpanel.new rPanelActionRenderer());
            MarkedReportTable.getColumnModel().getColumn(3).setCellEditor(rpanel.new TableActionCellEditor(rptevent));
        } else {
            MarkedReportTable.getColumnModel().getColumn(4).setCellRenderer(rpanel.new rPanelActionRenderer());
            MarkedReportTable.getColumnModel().getColumn(4).setCellEditor(rpanel.new TableActionCellEditor(rptevent));
        }          
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        intakeLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        MarkedReportTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(700, 500));
        setMinimumSize(new java.awt.Dimension(700, 500));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        intakeLabel.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        intakeLabel.setText("Intake");
        intakeLabel.setMaximumSize(new java.awt.Dimension(275, 47));
        intakeLabel.setMinimumSize(new java.awt.Dimension(275, 47));
        intakeLabel.setPreferredSize(new java.awt.Dimension(275, 47));
        getContentPane().add(intakeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 275, 40));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        MarkedReportTable.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        MarkedReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Supervisee ID", "Name", "Mark Given", "Mark", "Action"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        MarkedReportTable.setGridColor(new java.awt.Color(0, 0, 0));
        MarkedReportTable.setRowHeight(30);
        MarkedReportTable.setShowHorizontalLines(true);
        jScrollPane1.setViewportView(MarkedReportTable);
        if (MarkedReportTable.getColumnModel().getColumnCount() > 0) {
            MarkedReportTable.getColumnModel().getColumn(4).setMinWidth(113);
            MarkedReportTable.getColumnModel().getColumn(4).setPreferredWidth(113);
            MarkedReportTable.getColumnModel().getColumn(4).setMaxWidth(113);
        }

        jLabel2.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(2, 50, 99));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Marked Report");

        backBtn.setBackground(new java.awt.Color(76, 127, 174));
        backBtn.setFont(new java.awt.Font("Bell MT", 1, 12)); // NOI18N
        backBtn.setForeground(new java.awt.Color(255, 255, 255));
        backBtn.setText("Back");
        backBtn.setPreferredSize(new java.awt.Dimension(60, 25));
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(258, 258, 258)
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(292, Short.MAX_VALUE))
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 640, 410));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_background.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        jLabel1.setMaximumSize(new java.awt.Dimension(700, 500));
        jLabel1.setMinimumSize(new java.awt.Dimension(700, 500));
        jLabel1.setPreferredSize(new java.awt.Dimension(700, 500));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 500));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_backBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LecturerMarkedReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LecturerMarkedReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LecturerMarkedReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LecturerMarkedReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LecturerMarkedReport("id", "code", "type", null).setVisible(true);
            }
        });
    }
    
    private void showMarkedReport() {
        String fileNamex = "student_assessment.txt";
        String fileNamey = "assessment.txt";
        String fileNamez = "user.txt";

        DefaultTableModel model = (DefaultTableModel) MarkedReportTable.getModel();
        model.setRowCount(0); // Clear existing rows

        List<String> datax = FileHandler.readFile(fileNamex);
        List<String> datay = FileHandler.readFile(fileNamey);
        List<String> dataz = FileHandler.readFile(fileNamez);

        // Map to store studentID to studentName
        Map<String, String> studentNames = new HashMap<>();
        for (String linez : dataz) {
            String[] listz = linez.split(";");
            String studentID = listz[0];
            String studentName = listz[1];
            studentNames.put(studentID, studentName);
        } 

        // Set to track added rows to avoid duplication
        Set<String> addedRows = new HashSet<>();

        for (String linex : datax) {
            String[] listx = linex.split(";");
            String studentID = listx[1];
            String assessmentID = listx[2];
            String markGivenBySupervisor = listx[9];
            String markGivenBySecondMarker = listx[10];

            if (studentID != null) {
                String studentName = studentNames.get(studentID);
                if (studentName != null) {
                    for (String liney : datay) {
                        String[] listy = liney.split(";");
                        String currentAssessmentID = listy[0]; 
                        if (currentAssessmentID.equals(assessmentID) && currentAssessmentID.equals(AssmntID)) {
                            String spv = listy[4];
                            String secMarker = listy[5];

                            String rowIdentifier = studentID + "-" + assessmentID;
                            if (!addedRows.contains(rowIdentifier)) {
                                if (spv.equals(user.getUserID()) && !listx[9].isEmpty()) { // supervisor
                                    if("partially marked".equals(listx[6]) || "marked".equals(listx[6])){
                                        if ("internship_report".equals(AssmntType) || "investigation".equals(AssmntType)) {
                                            MarkedReportTable.removeColumn(MarkedReportTable.getColumnModel().getColumn(3)); 
                                            MarkedReportTable.getTableHeader().repaint();
                                            String[] reorderedData = {
                                            studentID,               // Supervisee ID
                                            studentName,             // Supervisee Name
                                            markGivenBySupervisor,   // Mark given by supervisor
                                            "null"
                                        };
                                        model.addRow(reorderedData);
                                        addedRows.add(rowIdentifier);
                                        } else {
                                            MarkedReportTable.getColumnModel().getColumn(3).setHeaderValue("Second Marker Mark");
                                            MarkedReportTable.getTableHeader().repaint();

                                            // Replace null values with "pending"
                                            markGivenBySupervisor = (markGivenBySupervisor.isEmpty()) ? "pending" : markGivenBySupervisor;
                                            markGivenBySecondMarker = (markGivenBySecondMarker.isEmpty()) ? "pending" : markGivenBySecondMarker;

                                            String[] reorderedData = {
                                                studentID,               // Supervisee ID
                                                studentName,             // Supervisee Name
                                                markGivenBySupervisor,   // Mark given by supervisor
                                                markGivenBySecondMarker  // Mark given by second marker
                                            };
                                            model.addRow(reorderedData);
                                            addedRows.add(rowIdentifier);
                                        }
                                    }                                   
                                } else if (secMarker.equals(user.getUserID()) && !listx[10].isEmpty()) { // second marker
                                    if("partially marked".equals(listx[6]) || "marked".equals(listx[6])){
                                        MarkedReportTable.getColumnModel().getColumn(3).setHeaderValue("Supervisor Mark");
                                        MarkedReportTable.getTableHeader().repaint();

                                        // Replace null values with "pending"
                                        markGivenBySecondMarker = (markGivenBySecondMarker.isEmpty()) ? "pending" : markGivenBySecondMarker;
                                        markGivenBySupervisor = (markGivenBySupervisor.isEmpty()) ? "pending" : markGivenBySupervisor;

                                        String[] reorderedData = {
                                            studentID,               // Supervisee ID
                                            studentName,             // Supervisee Name
                                            markGivenBySecondMarker, // Mark given by second marker
                                            markGivenBySupervisor    // Mark given by supervisor
                                        };
                                        model.addRow(reorderedData);
                                        addedRows.add(rowIdentifier);
                                    }      
                                }
                            }
                        }
                    }
                }
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable MarkedReportTable;
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel intakeLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
