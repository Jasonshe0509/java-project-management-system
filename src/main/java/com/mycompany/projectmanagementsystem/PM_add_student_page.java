/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.projectmanagementsystem;

import com.mycompany.projectmanagementsystem.GeneralFunction.FileHandler;
import com.mycompany.projectmanagementsystem.GeneralFunction.IDGenerator;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author ASUS
 */
public class PM_add_student_page extends javax.swing.JFrame {

    /**
     * Creates new form PM_add_student_page
     */
    private String assessmentID;
    PM_report_status parentpage;

    public PM_add_student_page(String assessmentID, PM_report_status parentpage) {
        initComponents();
        this.assessmentID = assessmentID;
        this.parentpage = parentpage;
        showStudentData();
        liveSearch();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        addbtn = new javax.swing.JButton();
        searchInput = new javax.swing.JTextField();
        title1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(700, 500));
        setMinimumSize(new java.awt.Dimension(700, 500));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        title.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        title.setForeground(new java.awt.Color(2, 50, 99));
        title.setText("Search:");
        getContentPane().add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 90, 30));

        userTable.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        userTable.setForeground(new java.awt.Color(2, 50, 99));
        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student ID", "Student Name", "Intake Code"
            }
        ));
        userTable.setRowHeight(30);
        jScrollPane1.setViewportView(userTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 80, 660, 360));

        addbtn.setBackground(new java.awt.Color(76, 127, 174));
        addbtn.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        addbtn.setForeground(new java.awt.Color(255, 255, 255));
        addbtn.setText("Add");
        addbtn.setPreferredSize(new java.awt.Dimension(60, 25));
        addbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbtnActionPerformed(evt);
            }
        });
        getContentPane().add(addbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 460, 100, -1));

        searchInput.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        searchInput.setForeground(new java.awt.Color(2, 50, 99));
        getContentPane().add(searchInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, 210, 30));

        title1.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        title1.setForeground(new java.awt.Color(2, 50, 99));
        title1.setText("Add Student");
        getContentPane().add(title1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 270, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/main_background.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        jLabel1.setMaximumSize(new java.awt.Dimension(700, 500));
        jLabel1.setMinimumSize(new java.awt.Dimension(700, 500));
        jLabel1.setPreferredSize(new java.awt.Dimension(700, 500));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbtnActionPerformed
        String duedate = null;
        int selectedRow = userTable.getSelectedRow();
        List<String> data = FileHandler.readFile("assessment.txt");
        for (String line : data) {
            String[] list = line.split(";");
            if (list[0].equals(assessmentID)) {
                duedate = list[3];
            }
        }
        if (selectedRow != -1) {
            String userid = userTable.getValueAt(selectedRow, 0).toString();
            String studentAssessmentID = IDGenerator.genID("SA");
            String record = studentAssessmentID + ";" + userid + ";" + assessmentID +";" + duedate + ";" + "" + ";" + "" + ";" + "pending" + ";" + "" + ";" + "" + ";" + "" + ";" + "" + ";" + "0";
            FileHandler.writeFile("student_assessment.txt", record);
            JOptionPane.showMessageDialog(null, "Successfully add a new student to this assessment");
            showStudentData();
            parentpage.loadReportStatus();
        }
    }//GEN-LAST:event_addbtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PM_add_student_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PM_add_student_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PM_add_student_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PM_add_student_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PM_add_student_page("A0001",null).setVisible(true);
            }
        });
    }

    private List<String> getUserID() {
        List<String> data = FileHandler.readFile("student_assessment.txt");
        List<String> userIds = new ArrayList<>(); // List to store user IDs
        for (String line : data) {
            String[] list = line.split(";");
            if (list[2].equals(assessmentID)) {
                userIds.add(list[1]); // Store the user ID in the list
            }
        }
        return userIds;
    }

    private void showStudentData() {
        List<String> userIds = getUserID(); // Retrieve the list of user IDs
        List<String> data = FileHandler.readFile("user.txt");
        DefaultTableModel model = (DefaultTableModel) userTable.getModel();
        // Clear the table before adding new data
        model.setRowCount(0);
        for (String line : data) {
            String[] list = line.split(";");
            if (!userIds.contains(list[0]) && list[10].equals("student")) {
                model.addRow(new Object[]{
                    list[0],
                    list[1],
                    list[11]
                });

            }
        }
    }

    private void liveSearch() {
        // Add DocumentListener to the search JTextField for live search as the user types
        searchInput.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                filterTable();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                filterTable();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                filterTable();
            }
        });
    }

    private void filterTable() {
        String searchText = searchInput.getText().toLowerCase();
        DefaultTableModel model = (DefaultTableModel) userTable.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        userTable.setRowSorter(sorter);
        List<RowFilter<Object, Object>> filters = new ArrayList<>();

        // Add filter for search text if it is not empty
        if (searchText.trim().length() > 0) {
            // Create filters for each column
            RowFilter<Object, Object> idFilter = RowFilter.regexFilter("(?i)" + searchText, 0); // ID column
            RowFilter<Object, Object> nameFilter = RowFilter.regexFilter("(?i)" + searchText, 1); // Name column
            RowFilter<Object, Object> intakeFilter = RowFilter.regexFilter("(?i)" + searchText, 2); // Intake column
            filters.add(RowFilter.orFilter(Arrays.asList(idFilter, nameFilter, intakeFilter)));
        }

        // Apply the filters
        if (filters.isEmpty()) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.andFilter(filters));
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addbtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchInput;
    private javax.swing.JLabel title;
    private javax.swing.JLabel title1;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
}
